2. 中文註解的完整程式碼（包含套件安裝與啟動指令）
python
複製
編輯
# app.py
from flask import Flask, request
import openpyxl
import requests
import threading
import time
import os

# 建立 Flask 應用
app = Flask(__name__)

# -------------------------
# 請替換成你自己的 LINE Channel Access Token 和 User ID
CHANNEL_ACCESS_TOKEN = "你的_channel_access_token"
USER_ID = "你的_userId"

# 設定 HTTP 請求的標頭（Header），用於呼叫 LINE Messaging API
headers = {
    "Content-Type": "application/json",
    "Authorization": f"Bearer {CHANNEL_ACCESS_TOKEN}"
}

# 回覆訊息給使用者（用於 webhook 收到訊息後回覆）
def reply_message(reply_token, text):
    url = "https://api.line.me/v2/bot/message/reply"
    data = {
        "replyToken": reply_token,
        "messages": [{"type": "text", "text": text}]
    }
    r = requests.post(url, headers=headers, json=data)
    print("回覆狀態：", r.status_code)

# 主動推播訊息給指定 User ID（用於 Excel 監控發現新資料時推播）
def push_message(text):
    url = "https://api.line.me/v2/bot/message/push"
    data = {
        "to": USER_ID,
        "messages": [{"type": "text", "text": text}]
    }
    r = requests.post(url, headers=headers, json=data)
    print("推播狀態：", r.status_code)

# 取得 Excel 最新一列資料並格式化成文字訊息
EXCEL_PATH = os.path.join(os.getcwd(), "出入紀錄.xlsx")

def get_latest_record(filename=EXCEL_PATH):
    try:
        # 開啟 Excel 檔案
        wb = openpyxl.load_workbook(filename)
        sheet = wb.active
        # 讀取最後一列資料
        last_row = sheet.max_row
        row_data = [cell.value for cell in sheet[last_row]]
        print("讀到的資料列：", row_data)

        # 確認資料是否完整且不為空
        if not row_data or len(row_data) < 4 or any(v is None for v in row_data[:4]):
            return None

        date, time_str, name, status = row_data[:4]
        # 回傳格式化的訊息
        return f"📋 最新出入紀錄\n🗓 {date} {time_str}\n👤 {name}\n📌 狀態：{status}"
    except Exception as e:
        print(f"讀取 Excel 發生錯誤：{e}")
        return None

# 持續監控 Excel，若有新資料就推播 LINE
def monitor_excel(interval=10):
    last_row_num = 0
    while True:
        try:
            # 確認 Excel 檔案存在
            if not os.path.exists(EXCEL_PATH):
                print(f"Excel 檔案不存在：{EXCEL_PATH}")
                time.sleep(interval)
                continue

            wb = openpyxl.load_workbook(EXCEL_PATH)
            sheet = wb.active
            current_last_row = sheet.max_row

            # 新增資料時觸發推播
            if current_last_row > last_row_num:
                last_row_num = current_last_row
                msg = get_latest_record()
                if msg:
                    print("偵測到新資料，推播中：", msg)
                    push_message(msg)
        except Exception as e:
            print("監控 Excel 發生錯誤，但繼續運行：", e)

        time.sleep(interval)

# Flask webhook 路由，接收 LINE 傳來的事件
@app.route("/webhook", methods=["POST"])
def webhook():
    body = request.json
    print("收到 webhook：", body)

    events = body.get("events", [])
    for event in events:
        # 只處理文字訊息事件
        if event["type"] == "message" and event["message"]["type"] == "text":
            reply_token = event["replyToken"]
            user_id = event["source"]["userId"]
            text = event["message"]["text"]
            print(f"用戶的 userId：{user_id}")
            print(f"訊息內容是：「{text}」")
            # 回覆收到的訊息
            reply_message(reply_token, f"收到你的訊息：{text}")

    return "OK"

# 主程式入口，啟動 Excel 監控執行緒和 Flask 伺服器
if __name__ == "__main__":
    # 啟動監控執行緒（設為 daemon，主程式關閉時會自動結束）
    t = threading.Thread(target=monitor_excel, daemon=True)
    t.start()

    # 啟動 Flask 伺服器，監聽 5000 端口
    app.run(port=5000)
環境設置與啟動教學
安裝套件

打開終端機（CMD、PowerShell 或 VSCode Terminal），切換到你的專案資料夾，執行：

bash
複製
編輯
pip install flask openpyxl requests
這會安裝：

flask：網頁框架，建立 webhook 接收伺服器

openpyxl：讀取 Excel 檔案

requests：向 LINE API 發送 HTTP 請求

啟動你的程式

在終端機（確定在程式碼所在資料夾）輸入：

bash
複製
編輯
python app.py
會看到 Flask 伺服器啟動的訊息：

csharp
複製
編輯
 * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)
啟動 ngrok

再開一個新的終端機視窗，執行：

bash
複製
編輯
ngrok http 5000
ngrok 會產生一個公開的網址，類似：

arduino
複製
編輯
https://xxxxx.ngrok.io
設定 LINE Webhook

將 ngrok 產生的網址加上 /webhook，填入 LINE 官方帳號後台的 webhook URL，例如：

arduino
複製
編輯
https://xxxxx.ngrok.io/webhook
並啟用 webhook。

測試

用 LINE 傳訊息給機器人，Flask 程式會收到並回覆

在 Excel 新增資料，監控執行緒會偵測到並推播 LINE

小提醒
ngrok 免費版網址會變動，若重開要重新設定 webhook URL

若要長期穩定使用，建議使用正式公開伺服器架設環境

