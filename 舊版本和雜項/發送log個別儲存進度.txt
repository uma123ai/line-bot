# -*- coding: utf-8 -*-
import os
import time
import threading
import requests
import json
from flask import Flask, request
from openpyxl import load_workbook

app = Flask(__name__)

# ===== 基本設定 =====
CHANNEL_ACCESS_TOKEN = "你的頻道存取令牌"
HEADERS = {
    "Content-Type": "application/json",
    "Authorization": f"Bearer {CHANNEL_ACCESS_TOKEN}"
}

EXCEL_FILE = "出入紀錄.xlsx"
USER_ID_FILE = "user_ids.txt"
PROGRESS_FILE = "user_progress.json"  # 用來記錄每個 user_id 已讀到 Excel 的行數

# ===== 推播訊息給單一使用者 =====
def push_message(text, user_id):
    data = {
        "to": user_id,
        "messages": [{"type": "text", "text": text}]
    }
    url = "https://api.line.me/v2/bot/message/push"
    r = requests.post(url, headers=HEADERS, json=data)
    print(f"🔔 推播給 {user_id}：{r.status_code}")

# ===== 儲存 userId（避免重複）=====
def save_user_id(user_id):
    if not os.path.exists(USER_ID_FILE):
        with open(USER_ID_FILE, "w") as f:
            pass
    with open(USER_ID_FILE, "r+") as f:
        ids = [line.strip() for line in f]
        if user_id not in ids:
            f.write(user_id + "\n")
            print(f"✅ 儲存新 userId：{user_id}")

# ===== 讀取所有儲存過的 userId =====
def load_user_ids():
    if not os.path.exists(USER_ID_FILE):
        return []
    with open(USER_ID_FILE, "r") as f:
        return [line.strip() for line in f if line.strip()]

# ===== 讀取使用者進度檔 =====
def load_progress():
    if not os.path.exists(PROGRESS_FILE):
        return {}
    with open(PROGRESS_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

# ===== 儲存使用者進度檔 =====
def save_progress(progress):
    with open(PROGRESS_FILE, "w", encoding="utf-8") as f:
        json.dump(progress, f, ensure_ascii=False, indent=2)

# ===== 取得 Excel 指定行範圍的新資料 =====
def get_new_rows(start, end):
    try:
        wb = load_workbook(EXCEL_FILE)
        sheet = wb.active
        msgs = []
        for row in range(start + 1, end + 1):
            values = [cell.value for cell in sheet[row][:4]]
            if len(values) < 4 or any(v is None for v in values):
                continue
            date, time_str, name, status = values
            msg = f"📋 新出入紀錄\n🗓 {date} {time_str}\n👤 {name}\n📌 狀態：{status}"
            msgs.append(msg)
        return msgs
    except Exception as e:
        return [f"⚠️ Excel 讀取錯誤：{e}"]

# ===== 背景執行：每 10 秒偵測 Excel 新資料並推播給每個使用者 =====
def monitor_excel(interval=10):
    progress = load_progress()  # 載入所有使用者的推播進度
    while True:
        try:
            if not os.path.exists(EXCEL_FILE):
                print(f"❌ 找不到 {EXCEL_FILE}")
                time.sleep(interval)
                continue

            wb = load_workbook(EXCEL_FILE)
            sheet = wb.active
            current_last_row = sheet.max_row

            user_ids = load_user_ids()
            for user_id in user_ids:
                last_read = progress.get(user_id, 1)  # 沒記錄預設從第2行開始（假設第1行是標題）
                if current_last_row > last_read:
                    new_msgs = get_new_rows(last_read, current_last_row)
                    for msg in new_msgs:
                        push_message(msg, user_id)
                    progress[user_id] = current_last_row  # 更新該使用者的推播進度

            save_progress(progress)  # 寫回進度檔
        except Exception as e:
            print("❌ 監控錯誤：", e)
        time.sleep(interval)

# ===== Webhook 接收 LINE 訊息 =====
@app.route("/webhook", methods=["POST"])
def webhook():
    body = request.json
    events = body.get("events", [])
    for event in events:
        if event["type"] == "message":
            user_id = event["source"]["userId"]
            text = event["message"]["text"]
            reply_token = event["replyToken"]

            save_user_id(user_id)  # 儲存 userId
            reply_message(reply_token, f"👋 哈囉，我已收到你的訊息：{text}")
    return "OK"

# ===== 回覆使用者訊息 =====
def reply_message(reply_token, text):
    url = "https://api.line.me/v2/bot/message/reply"
    data = {
        "replyToken": reply_token,
        "messages": [{"type": "text", "text": text}]
    }
    requests.post(url, headers=HEADERS, json=data)

# ===== 啟動程式 =====
if __name__ == "__main__":
    print("✅ 啟動 Flask + Excel 監控中...")
    threading.Thread(target=monitor_excel, daemon=True).start()
    app.run(port=5000)
